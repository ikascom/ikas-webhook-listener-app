---
alwaysApply: true
---
Project rules for Ikas Webhook Listener App (Next.js):

Core principles:
- Prefer simplicity, readability, explicitness. Keep logic in small, testable functions.
- TypeScript strict; avoid any. Use precise types from generated GraphQL.
- Treat API tokens and secrets as sensitive; never log them.

Stack overview:
- Next.js 15 App Router, React 19, TypeScript, Tailwind + shadcn/ui.
- İkas Admin GraphQL via `@ikas/admin-api-client` with codegen.
- Session via `iron-session`.

MCP usage:
- When generating new UI components, use the "shadcn-ui" MCP to fetch component boilerplates and demos. Align with existing `src/components/ui/*` structure.
- When generating or exploring İkas GraphQL operations, use the "ikas" MCP list and introspect tools to discover available queries/mutations and their shapes before implementation.

GraphQL and API workflow:
- Define queries/mutations in `src/lib/ikas-client/graphql-requests.ts` using `gql`.
- Run `pnpm codegen` to regenerate `src/lib/ikas-client/generated/graphql.ts` types and client wrappers.
- Acquire a client with `getIkas(token)` from `src/helpers/api-helpers.ts`.
- Execute queries via `ikasClient.queries.<name>()` and mutations via `ikasClient.mutations.<name>(variables)`.

Adding new API requests (procedure):
1) Add your GraphQL query/mutation to `src/lib/ikas-client/graphql-requests.ts` using the `gql` tag.
2) Run `pnpm codegen` to generate types and update the generated client.
3) Use `getIkas` to create the İkas client inside API routes or server actions.
4) For a query, call `ikasClient.queries.<YourQuery>()`; for a mutation, call `ikasClient.mutations.<YourMutation>(variables)`.

Project conventions:
- API routes under `src/app/api/*` must validate session and fetch the token via `getUserFromRequest` and `AuthTokenManager`.
- Do not call İkas APIs from the browser; always go through server routes.
- Keep UI logic in components under `src/components/*`; avoid business logic in pages.

Security and privacy:
- Use `onCheckToken` in `getIkas` to auto-refresh tokens. Do not expose tokens in responses or logs.

Quality gates:
- Run `pnpm codegen` when `graphql-requests.ts` changes.
- Ensure type-safety and linter cleanliness before committing.

Notes:
- Prefer `ApiRequests` in `src/lib/api-requests.ts` to bridge frontend to backend endpoints.
- Keep naming consistent with `ikas` brand and command patterns.
