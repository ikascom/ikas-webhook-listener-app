import { AuthConnectParams } from '@ikas/admin-api-client';
import { AppBridgeHelper } from '@ikas/app-helpers';
import { NextRouter } from 'next/router';
import { ApiRequests } from '../lib/api-requests';

const TOKEN_KEY = 'token';
const AUTHORIZED_APP_ID_KEY = 'authorizedAppId';

export class TokenHelpers {
  /**
   *
   * You can only use this method if your app is displayed in IFrame within ikas dashboard
   * otherwise it won't retrieve token via AppBridge and throw a timeout error
   *
   */
  static getTokenForIframeApp = async (router: NextRouter) => {
    // Check if token is inside an IFrame
    if (window.self !== window.top) {
      // Try to retrieve token from ikas dashboard via app bridge
      const authorizedAppId = (await AppBridgeHelper.getAuthorizedAppId()) || null;
      let token = sessionStorage.getItem(`${TOKEN_KEY}-${authorizedAppId}`);
      if (token) {
        const tokenData = JSON.parse(atob(token.split('.')[1]));

        // Return token if it is not expired
        if (new Date().getTime() < tokenData.exp * 1000) return token;
      }
      try {
        // If not found in session storage
        token = (await AppBridgeHelper.getNewToken()) || null;
        if (token) {
          // Save it to the session storage
          sessionStorage.setItem(`${TOKEN_KEY}-${authorizedAppId}`, token);
          return token;
        }
      } catch (e) {
        console.error(e);
      }
      await router.push('/authorize-store');
      return;
    }
    //TODO -> this else has been removed. It is only used when working locally.
    else {
      const authorizedAppId = sessionStorage.getItem(AUTHORIZED_APP_ID_KEY);
      return sessionStorage.getItem(`${TOKEN_KEY}-${authorizedAppId}`);
    }
    return;
  };

  /**
   *
   * This method only works if the URL has certain query parameters.
   * These params are generated by ikas and appended your App Url which is defined at Partner dashboard
   * Since the signature is encrypted by your appSecret you should validate it on the server-side
   *
   * @param router Next Router object
   * @param params extracted query params from 'window.location'
   */
  static getTokenForExternalApp = async (router: NextRouter, params: URLSearchParams) => {
    if (params.has('storeName')) {
      if (params.has('merchantId') && params.has('signature') && params.has(AUTHORIZED_APP_ID_KEY) && params.has('timestamp')) {
        const connectParams: AuthConnectParams = {
          authorizedAppId: params.get('authorizedAppId')!,
          merchantId: params.get('merchantId')!,
          signature: params.get('signature')!,
          storeName: params.get('storeName')!,
          timestamp: params.get('timestamp')!,
        };

        // Call `api/get-token-with-signature` with extracted parameters
        try {
          const res = await ApiRequests.getTokenWithSignature(connectParams);
          if (res.status == 200 && res.data?.data?.hasOwnProperty('token')) {
            // @ts-ignore
            const token = res.data.token;

            // Save token to the session storage
            const authorizedAppId = params.get(AUTHORIZED_APP_ID_KEY)!;
            sessionStorage.setItem(`${TOKEN_KEY}-${authorizedAppId}`, token);
            sessionStorage.setItem(AUTHORIZED_APP_ID_KEY, authorizedAppId);

            return token;
          }
        } catch {}
      }
      window.location.replace(`/api/oauth/authorize/ikas?storeName=${params.get('storeName')}`);
      throw 'authorize-needed';
    }

    await router.push('/authorize-store');
    return;
  };

  static setToken = async (router: any, params: URLSearchParams) => {
    if (params.has('token') && params.has('redirectUrl') && params.has('authorizedAppId')) {
      const token = params.get('token')!;

      const authorizedAppId = params.get('authorizedAppId')!;

      // Save token to the session storage
      sessionStorage.setItem(`${TOKEN_KEY}-${authorizedAppId}`, token);
      sessionStorage.setItem(`authorizedAppId`, authorizedAppId);

      window.location.replace(params.get('redirectUrl')!);
      throw 'redirectUrl-called';
    }

    await router.push('/authorize-store');
    return;
  };
}
